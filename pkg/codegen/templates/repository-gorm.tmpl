{{$tag := .Tag}}
type repository struct {
	db  *gorm.DB
}

func NewGormRepository(ctx context.Context, connString string, logger log.Factory, tracer opentracing.Tracer) (Repository, error) {
	var r Repository
	{
		db, err := gorm.Open(postgres.Open(connString), &gorm.Config{})
		if err != nil {
			logger.For(ctx).Fatal("Failed to open db", zap.Error(err))
		}

		db.Use(gormopentracing.New(gormopentracing.WithTracer(tracer)))

    // TODO: Ensure these migrations are correct
    // The OpenAPI Spec used to generate this code often uses
    // results in AutoMigrate statements being generated for 
    // request/response body objects instead of actual data models
    {{range uniqueResponseBodyTypes .Ops}}
		err = db.AutoMigrate(&{{.}}{})
		if err != nil {
			logger.For(ctx).Fatal("Failed to migrate db for type {{.}}", zap.Error(err))
		}
    {{end}}

		r = &repository{db: db}
	}

	return r, nil
}


{{range .Ops}}
{{$hasParams := .RequiresParamObject -}}
{{$pathParams := .PathParams -}}
{{$opid := .OperationId -}}
{{$tag := .Tag -}}
{{$successResponse := getSuccessResponseTypeDefinition . -}}
  {{if isCreate . -}}
    func (p *repository) {{$opid}}(ctx context.Context{{range .Bodies}}, {{lcFirst $successResponse.Schema.GoType}} *{{$successResponse.Schema.GoType}}{{end}}) (*{{$successResponse.Schema.GoType}}, error) {
    var tx *gorm.DB
    {{$opBodies := .Bodies -}}
    {{range $opBodies -}}
    tx = p.db.WithContext(ctx).Create({{lcFirst $successResponse.Schema.GoType}})
    if (tx.Error != nil) {
      return nil, tx.Error
    }
    {{end -}}
    {{if isBoolResponseType $successResponse -}}
    v := true
    return &v, nil
    {{else -}}
    return {{lcFirst $successResponse.Schema.GoType}}, nil
    {{end -}}
  {{end -}}
  {{if isGet . -}}
    func (p *repository) {{$opid}}(ctx context.Context{{genParamArgs .PathParams}}{{range .Bodies}}, {{lcFirst $successResponse.Schema.GoType}} *{{$successResponse.Schema.GoType}}{{end}}) (*{{$successResponse.Schema.GoType}}, error) {
	  var v {{$successResponse.Schema.GoType}}
    // TODO: Check the .First query as codegen is not able
    // to elegantly deal with multiple request parameters
	  tx := p.db.WithContext(ctx).Model(&{{$successResponse.Schema.GoType}}{}).First(&v, "{{range $pathParams -}}{{.ParamName}} = ? {{end}}"{{range $pathParams -}}, {{.GoVariableName}}{{end}})
	  if tx.Error == gorm.ErrRecordNotFound {
		  return nil, recorderrors.ErrNotFound
  	}
  	return &v, tx.Error
  {{end -}}
  {{if isUpdate . -}}
    func (p *repository) {{$opid}}(ctx context.Context{{range .Bodies}}, {{lcFirst $successResponse.Schema.GoType}} *{{$successResponse.Schema.GoType}}{{end}}) (*{{$successResponse.Schema.GoType}}, error) {
	  var v {{$successResponse.Schema.GoType}}
    // TODO: Check that the .Where query is appropriate
    {{range .Bodies -}}
  	tx := p.db.WithContext(ctx).Model(&{{$successResponse.Schema.GoType}}{}).Where("id = ?", {{lcFirst $successResponse.Schema.GoType}}.ID).UpdateColumns({{lcFirst $successResponse.Schema.GoType}})
	  if tx.RowsAffected == 0 {
		  return nil, recorderrors.ErrNotFound
	  }
    {{end -}}
  	return &v, tx.Error
  {{end -}}
  {{if isOther . -}}
  func (p *repository) {{$opid}}(ctx context.Context{{genParamArgs .PathParams}}{{range .Bodies}}, {{lcFirst $successResponse.Schema.GoType}} *{{$successResponse.Schema.GoType}}{{end}}) {{if $successResponse}}(*{{$successResponse.Schema.GoType}}, error){{else}}error{{end}} {
    // TODO: Unable to generate code for this Operation
    return nil, errors.New("Not Implemented")
  {{end -}}
  }
{{end}}

