type repository struct {
	ctx context.Context
	db  *gorm.DB
}

func NewGormRepository(ctx context.Context, connString string, tracer opentracing.Tracer, logger log.Factory) (Repository, error) {
	var r Repository
	{
		db, err := gorm.Open(postgres.Open(connString), &gorm.Config{})
		if err != nil {
			logger.For(ctx).Fatal("Failed to open db", zap.Error(err))
		}

		db.Use(gormopentracing.New(gormopentracing.WithTracer(tracer)))

    {{range uniqueResponseBodyTypes .Ops}}
		err = db.AutoMigrate(&{{.}}{})
		if err != nil {
			logger.For(ctx).Fatal("Failed to migrate db for type {{.}}", zap.Error(err))
		}
    {{end}}

		r = &repository{ctx: ctx, db: db}
	}

	return r, nil
}


{{range .Ops}}
{{$hasParams := .RequiresParamObject -}}
{{$pathParams := .PathParams -}}
{{$opid := .OperationId -}}
{{$tag := .Tag -}}
{{$successResponse := getSuccessResponseTypeDefinition .}}
  func (p *repository) {{$opid}}(ctx context.Context{{range .PathParams -}}, {{.ParamName}} string{{end}}{{range .Bodies}}, {{lcFirst .Schema.GoType}} *{{.Schema.GoType}}{{end}}) (*{{$successResponse.Schema.GoType}}, error) {
    {{if isCreate .}}
    var tx *gorm.DB
	  var v {{$successResponse.Schema.GoType}}
    {{$opBodies := .Bodies}}
    {{range $opBodies}}
    tx = p.db.WithContext(ctx).Create(&{{lcFirst .Schema.GoType}})
    if (tx.Error != nil) {
      return nil, tx.Error
    }
    {{end}}
    {{if isBoolResponseType $successResponse}}
    v = true
    {{end}}
    return &v, nil
    {{end}}
    {{if isGet .}}
	  var v {{$successResponse.Schema.GoType}}
	  tx := p.db.WithContext(ctx).Model(&{{$successResponse.Schema.GoType}}{}).First(&v, "{{range $pathParams -}}{{.ParamName}} = ? {{end}}"{{range $pathParams -}}, {{.ParamName}}{{end}})
	  if tx.Error == gorm.ErrRecordNotFound {
		  return nil, recorderrors.ErrNotFound
  	}
  	return &v, tx.Error
    {{end}}
    {{if isUpdate .}}
	  var v {{$successResponse.Schema.GoType}}
    {{range .Bodies}}
  	tx := p.db.WithContext(ctx).Model(&{{$successResponse.Schema.GoType}}{}){{range $pathParams -}}.Where("{{.ParamName}} = ?", {{.ParamName}}){{end}}.UpdateColumns({{lcFirst .Schema.GoType}})
	  if tx.RowsAffected == 0 {
		  return nil, recorderrors.ErrNotFound
	  }
    {{end}}
  	return &v, tx.Error
    {{end}}
    {{if isOther .}}
    // TODO: Unable to generate code for this Operation
    return nil, errors.New("Not Implemented")
    {{end}}
  }
{{end}}

