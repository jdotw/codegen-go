{{$tag := .Tag}}
{{$tagVar := .TagCamel}}
{{$tagPkg := .Package}}
type Service interface {
{{range .Ops -}}
{{$hasParams := .RequiresParamObject -}}
{{$pathParams := .PathParams -}}
{{$opid := .OperationId -}}
{{$successResponse := getSuccessResponseTypeDefinition . -}}
{{$pathVariableDefs := "" -}}
{{if isGet . -}}
{{$pathVariableDefs = genParamArgs .PathParams -}}
{{end -}}
{{$opid}}(ctx context.Context{{$pathVariableDefs}}{{range .Bodies}}, {{lcFirst $successResponse.Schema.GoType}} *{{$successResponse.Schema.GoType}}{{end}}) {{if $successResponse}}(*{{$successResponse.Schema.GoType}}, error){{else}}error{{end}}
{{end -}}
}

type service struct {
	repository Repository
}

func NewService(repository Repository, logger log.Factory, tracer opentracing.Tracer) Service {
	var svc Service
	{
		svc = &service{
			repository: repository,
		}
	}
	return svc
}

{{range .Ops}}
{{$hasParams := .RequiresParamObject -}}
{{$pathParams := .PathParams -}}
{{$opid := .OperationId -}}
{{$successResponse := getSuccessResponseTypeDefinition .}}
{{$tag := .Tag -}}
  {{$pathVariableDefs := ""}}
  {{$pathVariableNames := ""}}
  {{if isGet . -}}
  {{$pathVariableDefs = genParamArgs .PathParams}}
  {{$pathVariableNames = genParamNames .PathParams}}
  {{end}}
  func (f *service) {{$opid}}(ctx context.Context{{$pathVariableDefs}}{{range .Bodies}}, {{lcFirst $successResponse.Schema.GoType}} *{{$successResponse.Schema.GoType}}{{end}}) {{if $successResponse}}(*{{$successResponse.Schema.GoType}}, error){{else}}error{{end}} {
    v, err := f.repository.{{$opid}}(ctx{{$pathVariableNames}}{{range .Bodies}}, {{lcFirst $successResponse.Schema.GoType}}{{end}})
    return v, err
  }
{{end}}
