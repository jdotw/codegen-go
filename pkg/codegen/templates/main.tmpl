func main() {
	serviceName := "{{.Project}}"

	// Logging and Tracing
	logger, metricsFactory := log.Init(serviceName)
	tracer := tracing.Init(serviceName, metricsFactory, logger)

{{range .TagOps -}}
{{$tag := .Tag}}
{{$tagVar := .TagCamel}}
{{$tagPkg := .Package}}
  // {{$tag}} Service
  var {{$tagVar}}Router *mux.Router
  {
		repo, err := {{$tagPkg}}.NewGormRepository(context.Background(), os.Getenv("POSTGRES_DSN"), tracer, logger)
		if err != nil {
			logger.Bg().Fatal("Failed to create {{$tagPkg}} repository", zap.Error(err))
		}
		service := {{$tagPkg}}.NewService(repo, logger)
		endPoints := {{$tagPkg}}.NewEndpointSet(service, logger, tracer)
		{{$tagVar}}Router = {{$tagPkg}}.NewHTTPRouter(endPoints, logger, tracer)
  } 
{{end}}{{/* range . */}}

  m := tracing.NewServeMux(tracer)
	m.Handle("/metrics", promhttp.Handler()) // Prometheus
{{range .TagOps -}}
{{$tag := .Tag}}
{{$tagVar := .TagCamel}}
{{$tagPkg := .Package}}
	m.Handle("/{{kebabCase $tag}}/", {{$tagVar}}Router)
{{end}}{{/* range . */}}

	// Start Transports
	go func() error {
		// HTTP
		httpHost := ""
		httpPort := 8080
		httpAddr := httpHost + ":" + strconv.Itoa(httpPort)
		logger.Bg().Info("Listening", zap.String("transport", "http"), zap.String("host", httpHost), zap.Int("port", httpPort), zap.String("addr", httpAddr))
		err := http.ListenAndServe(httpAddr, m)
		logger.Bg().Fatal("Exit", zap.Error(err))
		return err
	}()

	// Select Loop
	select {}
}
