{{ $tag := .Tag }}
type EndpointSet struct {
{{range .Ops}}
  {{.OperationId}}Endpoint    endpoint.Endpoint{{end}}
}

//go:embed policies/endpoint.rego
var endpointPolicy string

func NewEndpointSet(s Service, logger log.Factory, tracer opentracing.Tracer) EndpointSet { 
	authn := jwt.NewAuthenticator(logger, tracer)
	authz := opa.NewAuthorizor(logger, tracer)
{{range .Ops}} 
  var {{lcFirst .OperationId}}Endpoint endpoint.Endpoint
	{
		{{lcFirst .OperationId}}Endpoint = make{{.OperationId}}Endpoint(s, logger, tracer)
		{{lcFirst .OperationId}}Endpoint = authz.NewInProcessMiddleware(endpointPolicy, "data.{{toPackageName $tag}}.endpoint.authz.{{snakeCase .OperationId}}")({{lcFirst .OperationId}}Endpoint)
		{{lcFirst .OperationId}}Endpoint = authn.NewMiddleware()({{lcFirst .OperationId}}Endpoint)
		{{lcFirst .OperationId}}Endpoint = kittracing.TraceServer(tracer, "{{.OperationId}}Endpoint")({{lcFirst .OperationId}}Endpoint)
	}{{end}}
	return EndpointSet{ {{range .Ops}}
		{{.OperationId}}Endpoint: {{lcFirst .OperationId}}Endpoint,{{end}}
	}
}

{{range .Ops}}
{{$opid := .OperationId -}}
{{$hasParams := .RequiresParamObject -}}
{{$pathParams := .PathParams -}}
{{$tag := .Tag -}}

// {{$opid}} 

{{range .Bodies -}}
type {{$opid}}{{.Suffix}}EndpointRequestBody {{.Schema.GoType}}

{{end -}}

type {{$opid}}EndpointRequest struct {
{{range .PathParams -}}
{{.GoName}} string
{{end -}}
{{if .HasBody -}}
{{range .Bodies -}}
{{$opid}}{{.Suffix}}EndpointRequestBody
{{end -}}
{{end -}}
}

{{$successResponse := getSuccessResponseTypeDefinition . -}}
func make{{$opid}}Endpoint(s Service, logger log.Factory, tracer opentracing.Tracer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		logger.For(ctx).Info("{{$tag}}.{{$opid}}Endpoint received request")
		er := request.({{$opid}}EndpointRequest)
    {{if isGet . -}}
		v, err := s.{{$opid}}(ctx{{range .PathParams -}}, er.{{camelCase .ParamName}}{{end}})
    {{else -}}

    // Convert endpoint request to JSON
		erJSON, err := json.Marshal(er)
    if err != nil {
      return nil, err
    }

    // Create {{$successResponse.Schema.GoType}} from endpoint request JSON
		var sr {{$successResponse.Schema.GoType}}
		json.Unmarshal(erJSON, &sr)

    // Set variables from path parameters
    {{- range .PathParams}}
		sr.{{.GoName}} = er.{{.GoName}}
    {{- end}}

    // 
    // TODO: Review the code above. 
    //       The JSON marshalling isn't ideal. 
    //       You should manually construct the struct being passed 
    //       to the service from variables in the endpoint request
    // 

		v, err := s.{{$opid}}(ctx{{range .Bodies}}, &sr{{end}})
    {{end -}}
		if err != nil {
			return &v, err
		}
		return &v, nil
	}
}

{{end}}

