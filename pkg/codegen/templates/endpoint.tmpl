{{ $tag := .Tag }}
type EndpointSet struct {
{{range .Ops}}
  {{.OperationId}}Endpoint    endpoint.Endpoint{{end}}
}

//go:embed policies/endpoint.rego
var endpointPolicy string

func NewEndpointSet(s Service, logger log.Factory, tracer opentracing.Tracer) EndpointSet { 
	authn := jwt.NewAuthenticator(logger, tracer)
	authz := opa.NewAuthorizor(logger, tracer)
{{range .Ops}} 
  var {{lcFirst .OperationId}}Endpoint endpoint.Endpoint
	{
		{{lcFirst .OperationId}}Endpoint = make{{.OperationId}}Endpoint(s, logger, tracer)
		{{lcFirst .OperationId}}Endpoint = authz.NewInProcessMiddleware(endpointPolicy, "data.{{toPackageName $tag}}.endpoint.authz.{{snakeCase .OperationId}}")({{lcFirst .OperationId}}Endpoint)
		{{lcFirst .OperationId}}Endpoint = authn.NewMiddleware()({{lcFirst .OperationId}}Endpoint)
		{{lcFirst .OperationId}}Endpoint = kittracing.TraceServer(tracer, "{{.OperationId}}Endpoint")({{lcFirst .OperationId}}Endpoint)
	}{{end}}
	return EndpointSet{ {{range .Ops}}
		{{.OperationId}}Endpoint: {{lcFirst .OperationId}}Endpoint,{{end}}
	}
}


{{range .Ops}}
{{$opid := .OperationId -}}
{{$hasParams := .RequiresParamObject -}}
{{$pathParams := .PathParams -}}
{{$tag := .Tag -}}



// {{$opid}} 
type {{$opid}}EndpointRequest struct {
{{range .PathParams -}}
{{.GoName}} string
{{end -}}
{{if .HasBody -}}
{{range .Bodies -}}
requestBody {{$opid}}{{.Suffix}}Request
{{end -}}
{{end -}}
}

func make{{$opid}}Endpoint(s Service, logger log.Factory, tracer opentracing.Tracer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		logger.For(ctx).Info("{{$tag}}.{{$opid}}Endpoint received request")
		req := request.({{$opid}}EndpointRequest)
    // 
    // TODO: Create the object that is passed to the service
    // 
		v, err := s.{{$opid}}(ctx{{range .PathParams -}}, req.{{camelCase .ParamName}}{{end}}{{range .Bodies}}, &req.requestBody{{end}})
		if err != nil {
			return &v, err
		}
		return &v, nil
	}
}

{{end}}

