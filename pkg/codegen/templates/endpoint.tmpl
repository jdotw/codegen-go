type EndpointSet struct {
{{range .Ops}}
  {{.OperationId}}Endpoint    endpoint.Endpoint{{end}}
}

func NewEndpointSet(s Service, logger log.Factory, tracer opentracing.Tracer) EndpointSet { {{range .Ops}} 
  var {{lcFirst .OperationId}}Endpoint endpoint.Endpoint
	{
		{{lcFirst .OperationId}}Endpoint = make{{.OperationId}}Endpoint(s)
		{{lcFirst .OperationId}}Endpoint = tracing.TraceServer(tracer, "{{.OperationId}}")({{lcFirst .OperationId}}Endpoint)
	}{{end}}
	return EndpointSet{ {{range .Ops}}
		{{.OperationId}}Endpoint: {{lcFirst .OperationId}}Endpoint,{{end}}
	}
}

// Create

type CreateFacilityRequest struct {
	Facility *api.DirectDebitFacility
}

func makeCreateFacilityEndpoint(s DirectDebitFacilityService, logger log.Factory) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		logger.For(ctx).Info("CreateFacilityEndpoint received request")
		req := request.(CreateFacilityRequest)
		v, err := s.CreateFacility(ctx, req.Facility)
		if err != nil {
			return &v, err
		}
		return &v, nil
	}
}

// Get

type GetFacilityRequest struct {
	ID string
}

func makeGetFacilityEndpoint(s DirectDebitFacilityService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(GetFacilityRequest)
		v, err := s.GetFacilityByID(ctx, req.ID)
		if err != nil {
			return &v, err
		}
		return &v, nil
	}
}

// Update

type UpdateFacilityRequest struct {
	ID       string
	Facility *api.DirectDebitFacility
}

func makeUpdateFacilityEndpoint(s DirectDebitFacilityService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(UpdateFacilityRequest)
		v, err := s.UpdateFacility(ctx, req.ID, req.Facility)
		return &v, err
	}
}
