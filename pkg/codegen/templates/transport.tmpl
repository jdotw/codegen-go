{{$tag := .Tag}}

func NewHTTPRouter(endpoints EndpointSet, logger log.Factory, tracer opentracing.Tracer) *mux.Router {
	options := []httptransport.ServerOption{
		httptransport.ServerErrorEncoder(errorEncoder),
	}

  r := mux.NewRouter()

{{range .Ops}}
{{$hasParams := .RequiresParamObject -}}
{{$pathParams := .PathParams -}}
{{$opid := .OperationId -}}
	{{ .OperationIdLowerCamel }}Handler := httptransport.NewServer(
		endpoints.{{$opid}}Endpoint,
		decode{{$opid}}Request,
		encodeResponse,
		options...,
	)
	r.Handle("{{.Path}}", {{$opid}}Handler).Methods("{{.Method}}")
{{end}}

	return r
}

{{range .Ops}}
{{$hasParams := .RequiresParamObject -}}
{{$pathParams := .PathParams -}}
{{$opid := .OperationId -}}

// {{$opid}}

func decode{{$opid}}Request(_ context.Context, r *http.Request) (interface{}, error) {
  {{if .HasBody}}var body {{$opid}}Request
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		return nil, err
	}{{end}}

	vars := mux.Vars(r)
	request := {{$opid}}Request{
    {{genEndpointRequestVars $pathParams}} {{if .HasBody}}{{$tag}}: body,{{end}}
	}
	return request, nil
}
{{end}}

// Response Encoder (Generic)

func encodeResponse(_ context.Context, w http.ResponseWriter, response interface{}) error {
	return json.NewEncoder(w).Encode(response)
}

// Error Encoder

type errorResponse struct { 
  {{ genErrorStringVar }}
}

func errorEncoder(ctx context.Context, err error, w http.ResponseWriter) {
	if err == recorderrors.ErrNotFound {
		w.WriteHeader(http.StatusNotFound)
	} else {
		w.WriteHeader(http.StatusInternalServerError)
		json.NewEncoder(w).Encode(errorResponse{Error: err.Error()})
	}
}
